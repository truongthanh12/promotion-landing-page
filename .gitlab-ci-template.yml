.dockerfile: &dockerfile
  - |
    cat << EOF > Dockerfile
    FROM $DOCKER_HUB/base-nodejs-18-alpine-s3cmd:1d49f4c5 as builder
    # Create working directory
    WORKDIR /usr/src/app
    # Install app dependencies
    COPY . .

    RUN apk add tzdata && cp /usr/share/zoneinfo/Asia/Ho_Chi_Minh /etc/localtime
    RUN node -v
    RUN npm install -g pm2
    RUN npm install
    RUN npm run build

    # Đặt lệnh upload s3 ở step cuối của docker, để sát với stage deploy nhất có thể
    RUN s3cmd --host-bucket='https://hcm-vt-s3.vieon.vn' \
    --host=https://hcm-vt-s3.vieon.vn  \
    --access_key=$S3_ACCESS_KEY  \
    --secret_key=$S3_SECRET_KEY \
    --no-mime-magic --guess-mime-type \
    put -r --acl-public -f /usr/src/app/dist/ s3://$DIR_NAME/
    
    RUN ls
    
    FROM nginx:alpine AS deploy
    COPY --from=builder /usr/src/app/dist/ /usr/share/nginx/html
    COPY _config/default.conf /etc/nginx/conf.d/default.conf
    
    #CMD npm run host

    #CMD pm2 start -i 1 "npm run start" --no-daemon
    EOF

.dockerize:
  stage: build
  variables:
    TRIVY_AUTH_URL: ${DOCKER_HUB}
    TRIVY_USERNAME: ${DOCKER_HUB_USERNAME}
    TRIVY_PASSWORD: ${DOCKER_HUB_PASSWORD}
    DIR_NAME: ${CI_ENVIRONMENT_NAME}-${DOCKER_IMAGE_NAME}
  script:
    - cat .env
    - cat Dockerfile
    - docker build -t ${IMAGE_TAG} --build-arg PLATFORM=${PLATFORM} --build-arg GITLAB_READ_TOKEN=${GITLAB_READ_TOKEN} --build-arg APP_VERSION=${IMAGE_TAG} -f ${DOCKER_FILE} .
    - docker push ${IMAGE_TAG}

# dev (override ci-template: dockerize:master)
dockerize:master:
  extends: .dockerize
  stage: build
  environment:
    name: dev
  before_script:
    - cat $BUILD_ENV_FILE > .env
    - *dockerfile
    - DOCKER_FILE=Dockerfile
    - IMAGE_TAG=${DOCKER_HUB}/${DOCKER_IMAGE_NAME}-${CI_ENVIRONMENT_NAME}:${CI_COMMIT_REF_NAME##*/}-${CI_COMMIT_SHORT_SHA}
  only:
    refs:
      - master
      - develop

# testing:
dockerize:testing:
  extends: .dockerize
  stage: build
  environment:
    name: testing
  before_script:
    - cat $BUILD_ENV_FILE > .env
    - *dockerfile
    - DOCKER_FILE=Dockerfile
    - IMAGE_TAG=${DOCKER_HUB}/${DOCKER_IMAGE_NAME}-${CI_ENVIRONMENT_NAME}:${CI_COMMIT_REF_NAME##*/}-${CI_COMMIT_SHORT_SHA}
  when: manual
  only:
    refs:
      - /^release\/*/i

# staging
dockerize:staging:
  extends: .dockerize
  stage: build
  environment:
    name: staging
  before_script:
    - cat $BUILD_ENV_FILE > .env
    - *dockerfile
    - DOCKER_FILE=Dockerfile
    - IMAGE_TAG=${DOCKER_HUB}/${DOCKER_IMAGE_NAME}-staging:${CI_COMMIT_REF_NAME##*/}-${CI_COMMIT_SHORT_SHA}
  when: manual
  only:
    refs:
      - /^release\/*/i

# production (override ci-template: dockerize:release)
dockerize:release:
  extends: .dockerize
  stage: build
  environment:
    name: production
  variables:
    TRIVY_AUTH_URL: ${DOCKER_HUB}
    TRIVY_USERNAME: ${DOCKER_HUB_USERNAME}
    TRIVY_PASSWORD: ${DOCKER_HUB_PASSWORD}
    DIR_NAME: ${CI_ENVIRONMENT_NAME}-${DOCKER_IMAGE_NAME}
  before_script:
    - cat $BUILD_ENV_FILE > .env
    - *dockerfile
    - DOCKER_FILE=Dockerfile
    - IMAGE_TAG=${DOCKER_HUB}/${DOCKER_IMAGE_NAME}-${CI_ENVIRONMENT_NAME}:${CI_COMMIT_REF_NAME##*/}-${CI_COMMIT_SHORT_SHA}
  when: manual
  only:
    refs:
      - /^release\/*/i

# staging env
.deploy-staging:
  stage: deploy
  environment:
    name: testing
  only:
    refs:
      - /^release\/*/i

.deploy-k8s:
  image:
    name: curlimages/curl:7.79.1
  stage: deploy
  script:
    - |
      curl -u ${OPERATOR_USER}:${OPERATOR_PASS} -H "Content-type: application/json" -X POST https://operator.vieon.vn --data "{\"env\": \"${ENVIRONMENT}\", \"project\": \"${PROJECT_NAME}\", \"image\": \"${IMAGE_NAME}\", \"tag\": \"${IMAGE_TAG}\"}"

.clear-cache-cdn:
  image:
    name: curlimages/curl:7.79.1
  script:
    - DIR_TIME=$(date +%s)
    - DIR_NAME=${CI_ENVIRONMENT_NAME}-${DOCKER_IMAGE_NAME}
    - |
      curl -X POST -F token=glptt-7012f3ea1ca07fc8d712a3c9a649183292a7e2dc -F "ref=master" -F "variables[CDN_DOMAIN]=static2.vieon.vn" -F "variables[CDN_PATH]=/${DIR_NAME}" https://gitlab.vieon.vn/api/v4/projects/620/trigger/pipeline
  only:
    refs:
      - /^release\/*/i
      - master

.send-mail:
  script:
    - gitlab send ${CI_PROJECT_ID} --host=${CI_SERVER_URL} --token=${AUTO_BOT_TOKEN} --version=${CI_COMMIT_BRANCH:8} --send-to=${SEND_EMAIL_TO} --send-cc=${SEND_EMAIL_CC} --send-bcc=${SEND_EMAIL_BCC}
    - echo "gitlab send ${CI_PROJECT_ID} --host=${CI_SERVER_URL} --token=${AUTO_BOT_TOKEN} --version=${CI_COMMIT_BRANCH:8} --send-to=${SEND_EMAIL_TO} --send-cc=${SEND_EMAIL_CC} --send-bcc=${SEND_EMAIL_BCC}"

# Use create-tag from ci-template/static-web.gitlab-ci.yml
create-tag:
  stage: build
  before_script:
    - VERSION=${CI_COMMIT_BRANCH:8}
  script:
    - docker pull ${DOCKER_HUB}/git-operator:2.1.0
    - docker run --rm ${DOCKER_HUB}/git-operator:2.1.0 --host=${CI_SERVER_URL} --token=${AUTO_BOT_TOKEN} gitlab ${CI_PROJECT_ID} tag --version=${VERSION} --ref=${CI_COMMIT_SHA}
  only:
    refs:
      - /^release\/*/i
  allow_failure: true
